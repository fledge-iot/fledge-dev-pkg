#!/usr/bin/env bash

##--------------------------------------------------------------------
## Copyright (c) 2018 Dianomic Systems Inc.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##--------------------------------------------------------------------
##
## Author: Massimiliano Pinto
##


set -e

usage="$(basename "$0") [help|clean|cleanall]
This script is used to create the Debian package of Fledge SDK
Arguments:
 help	  - Display this help text
 clean    - Remove all the old versions saved in format .XXXX
 cleanall - Remove all the versions, including the last one"

# The script must be executed from the root git directory
GIT_ROOT=`pwd`
architecture=`arch`

for i in "$@"
do
  case "$i" in
      clean)
          if [ -d "${GIT_ROOT}/packages/Debian/build" ]; then
            echo -n "Cleaning the build folder from older versions..."
            find "${GIT_ROOT}/packages/Debian/build/${architecture}" -maxdepth 2 | grep '.*\.[0-9][0-9][0-9][0-9]' | xargs rm -rf
            echo "Done."
          else
            echo "No build folder, skipping clean"
          fi
          exit 0
          ;;
      cleanall)
          if [ -d "${GIT_ROOT}/packages/Debian/build" ]; then
            echo -n "Cleaning the build folder..."
            rm -rf ${GIT_ROOT}/packages/Debian/build
            echo "Done."
          else
            echo "No build folder, skipping cleanall"
          fi
          exit 0
          ;;
      help)
          echo "${usage}"
          exit 1
          ;;
      *)
        echo "Unrecognized option: $i"
        exit 1
        ;;
  esac
done


if [ "${FLEDGE_ROOT}" == "" ]; then
  echo "FLEDGE_ROOT environment variable is not set, can not continue."
  exit 1
fi

version=`cat ${FLEDGE_ROOT}/VERSION | tr -d ' ' | grep 'fledge_version=' | head -1 | sed -e 's/\(.*\)=\(.*\)/\2/g'`
BUILD_ROOT="${GIT_ROOT}/packages/Debian/build/${architecture}"
git_tag_info=$(git describe --tags) && commit_count=$(echo ${git_tag_info} | cut -d- -f2) || { commit_count=$(git rev-list --count HEAD); git_tag_info="v$version-$commit_count-g$(git rev-parse --short HEAD)"; }
branch_name=$(git rev-parse --abbrev-ref HEAD)
# Final package name
if [[ ${branch_name} != "main" ]] && [[ ! ${branch_name} =~ ^[0-9]+\.[0-9]+\.[0-9]+RC ]]; then package_name="fledge-dev_${version}-${commit_count}_${architecture}"; version=${git_tag_info:1}; else package_name="fledge-dev_${version}_${architecture}"; fi

# Print the summary of findings
echo "  - Fledge Dev package (headers and libraries) -"
echo "The package root directory is : ${GIT_ROOT}"
echo "The Fledge directory is       : ${FLEDGE_ROOT}"
echo "The Fledge version is         : ${version}"
echo "The package will be built in  : ${BUILD_ROOT}"
echo "The architecture is set as    : ${architecture}"
echo "The package name is           : ${package_name}"
echo

# Create the package directory. If a directory with the same name exists,
# it is copied with a version number.

# First, create the BUILD_ROOT folder, if necessary
if [ ! -L "${BUILD_ROOT}" -a ! -d "${BUILD_ROOT}" ]; then
    mkdir -p "${BUILD_ROOT}"
fi

cd "${BUILD_ROOT}"
existing_pkgs=`find . -maxdepth 1 -name "${package_name}.????" | wc -l`
existing_pkgs=$((existing_pkgs+1))
new_stored_pkg=$(printf "${package_name}.%04d" "${existing_pkgs}")
if [ -d "${package_name}" ]; then
    echo "Saving the old working environment as ${new_stored_pkg}"
    mv "${package_name}" "${new_stored_pkg}"
fi
mkdir "${package_name}"

# Populate the package directory with Debian files
# First with files common to all platforms
echo
echo "Populating the package and updating version in control file ..."
cd "${package_name}"
cp -R ${GIT_ROOT}/packages/Debian/common/* .
cp -R ${GIT_ROOT}/packages/Debian/${architecture}/* .
sed -i "s/Version: 1.0.0/Version: ${version}/g" DEBIAN/control
if [[ ${branch_name} = "main" ]] || [[ ${branch_name} =~ ^[0-9]+\.[0-9]+\.[0-9]+RC ]]; then echo "Build: ${git_tag_info:1}" >> DEBIAN/control; fi
# Create include dir
mkdir -p usr/include/fledge
cd usr/include/fledge
# Add Fledge *.h files
cp -R ${FLEDGE_ROOT}/C/common/include/*.h .
cp -R ${FLEDGE_ROOT}/C/plugins/common/include/*.h .
cp -R ${FLEDGE_ROOT}/C/services/common/include/*.h .
cp -R ${FLEDGE_ROOT}/C/plugins/filter/common/include/*.h .
echo "  - Fledge header files added."
# Add third-party include files
cp -R ${FLEDGE_ROOT}/C/thirdparty/rapidjson/include/rapidjson .
echo "  - Third-party header files added (rapidjson)."
mkdir Simple-Web-Server
cp ${FLEDGE_ROOT}/C/thirdparty/Simple-Web-Server/*.hpp Simple-Web-Server
echo "  - Third-party header files added (Simple-Web-Server)."
cd ../../../
# Create lib dir
mkdir -p usr/lib/fledge
cd usr/lib/fledge
# Add all fledge libraries
cp -R ${FLEDGE_ROOT}/cmake_build/C/lib/* .
echo "  - Fledge library files added."
echo "Done."
echo

# Build the package
cd "${BUILD_ROOT}"

# Save the old versions
existing_pkgs=`find . -maxdepth 1 -name "${package_name}.deb.????" | wc -l`
existing_pkgs=$((existing_pkgs+1))
new_stored_pkg=$(printf "${package_name}.deb.%04d" "${existing_pkgs}")

if [ -e "${package_name}.deb" ]; then
    echo "Saving the old package as ${new_stored_pkg}"
    mv "${package_name}.deb" "${new_stored_pkg}"
fi

echo "Building the new package..."
dpkg-deb --build ${package_name}
echo "Building complete."

exit 0
